// Singleton паттерн - гарантирует существование только одного объекта определённого класса
// и позволяет обратиться к этому объекту из любого места программы

// Преимущество: удобно в использовании ( гарантирует наличие единственного экземпляра класса с глобальной точкой доступа )
// Недостаток: нарушает модульность кода ( проявляется при написании юнит-тестов ), принцип единственной отвественности класса

// Также стоит упомянуть, что паттерн Одиночка ведёт себя неправильно при многопоточности (несколько потоков могут одновременно 
// вызвать метод получения Одиночки и создать сразу несколько экземпляров объекта)
// Однако в текущей реализации на языке TS отсутсвует данная проблема, т.к. TS - однопоточный язык.

 class Singleton {

  private static instance: Singleton;

  // Конструктор скрыт, чтобы предотвратить создание объекта через оператор new.
  private constructor() { }


  // Статический метод, управляющий доступом к экземпляру одиночки
  // Данная реализация позволяет расширять класс, сохраняя повсюду
  // только один экземпляр каждого подкласса
  public static getInstance(): Singleton {
      if (!Singleton.instance) {
          Singleton.instance = new Singleton();
      }

      return Singleton.instance;
  }


  public someBusinessLogic() {
      // ...
  }
}


function clientCode() {
  // при реализации паттерна одиночки переменные будут равны, т.к. указывают на один и тот же (единственный) объект класса
  const s1 = Singleton.getInstance();
  const s2 = Singleton.getInstance();
}

clientCode();
